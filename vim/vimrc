" No Compatibility. That just sucks
" " especially annoying on redhat/windows/osx
set nocompatible

" Backspace works in Insert mode (e.g. not inserting a ^?), 
" but won't delete over line breaks, or automatically-inserted
" indentation, or the place where insert mode started:
set backspace=indent,eol,start

" Better modes.  Remeber where we are
set viminfo=!,'100,\"100,:20,<50,s10,h,n~/.viminfo

" Pathogen load
call pathogen#infect()

" colors
" " Enable Syntax Colors
"  in GUI mode we go with fruity and Monaco 13
"  in CLI mode myterm looks better (fruity is GUI only)
syntax on
if has("gui_running")
  colorscheme solarized
  if has("mac")
    "set guifont=Monaco:h13
    "set guifont=Source\ Code\ Pro\ for\ Powerline:h13
    set guifont=Monaco\ for\ Powerline:h13
    set fuoptions=maxvert,maxhorz
    set background=light
    " does not work properly on os x
    " au GUIEnter * set fullscreen
  else
    set guifont=Monaco\ for\ Powerline:h13
    "set guifont=Source\ Code\ Pro\ for\ Powerline:h13
    "set guifont=DejaVu\ Sans\ Mono\ 10
  endif
else
  colorscheme solarized
endif

" Airline
set laststatus=2
if has("gui_running")
  let g:airline_theme='solarized'
  let g:airline_powerline_fonts=1
else
  let g:airline_powerline_fonts=0
endif

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"let g:airline_mode_map = {
"  \ '__' : '-',
"  \ 'n' : 'N',
"  \ 'i' : 'I',
"  \ 'R' : 'R',
"  \ 'c' : 'C',
"  \ 'v' : 'V',
"  \ 'V' : 'V',
"  \ '' : 'V',
"  \ 's' : 'S',
"  \ 'S' : 'S',
"  \ '' : 'S',
"  \ }

  " unicode symbols
  "
" vim-powerline symbols
  " unicode symbols
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.paste = ' > - P'
let g:airline_readonly_symbol   = ''
let g:airline_symbols.whitespace = 'Îž'

let g:airline#extensions#whitespace#checks = []
let g:airline_section_y = airline#section#create_right(['%{printf("%s%s",&fenc,&ff!="unix"?":".&ff:"")}'])
let g:airline_section_z = airline#section#create_right(['%3l:%2c'])
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#ctrlp#color_template = 'replace'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''

" Move Backup Files to ~/.vim/sessions
set backupdir=~/.vim/sessions
set dir=~/.vim/sessions

" Remember cursor position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe
"normal! g`\"" | endif

" Enable hidden buffers
set hidden
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>

" enable automatic title setting for terminals
set title
set titleold="Terminal"
set titlestring=%F

" Enable filetype plugins and indention
filetype plugin indent on

" activate a permanent ruler and disable Toolbar, and add line
" highlightng as well as numbers.
" And disable the sucking pydoc preview window for the omni completion
" also highlight current line and disable the blinking cursor.
set ruler
set guioptions-=T
set completeopt-=preview
set gcr=a:blinkon0
if has("gui_running")
  set cursorline
endif 
set ttyfast

" customize the wildmenu
set wildmenu
set wildignore+=*.dll,*.o,*.pyc,*.bak,*.exe,*.jpg,*.jpeg,*.png,*.gif,*$py.class,*.class,*/*.dSYM/*,*.dylib
set wildmode=list:full 

" sets leader to ',' and localleader to "\"
let mapleader=","
let maplocalleader="\\"

"syntax enable
set tags=.tags
set vb

" Taglist
" "
let Tlist_Use_Right_Window = 1
let Tlist_Enable_Fold_Column = 0
let Tlist_Compact_Format = 1
let Tlist_File_Fold_Auto_Close = 0
let Tlist_GainFocus_On_ToggleOpen = 1
map <F11> :TlistToggle<cr>
vmap <F11> <esc>:TlistToggle<cr>
imap <F11> <esc>:TlistToggle<cr>

" quicker window switching
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" arrow keys move visible lines
" inoremap <Down> <C-R>=pumvisible() ? "\<lt>Down>" : "\<lt>C-O>gj"<CR>
" inoremap <Up> <C-R>=pumvisible() ? "\<lt>Up>" : "\<lt>C-O>gk"<CR>
" nnoremap <Down> gj
" nnoremap <Up> gk
" vnoremap <Down> gj
" vnoremap <Up> gk
"

" And be global by default
set gdefault

" hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

" autoread
set autoread

" Autoresize windows
autocmd VimResized * :wincmd =

" split edit vimrc
nnoremap <leader>ev <C-w><C-s><C-l>:e $MYVIMRC<CR>

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" Ack on <leader>a
nnoremap <leader>a :Ack 
nnoremap <leader>A :AckFromSearch<CR>
let g:ackprg="ack -H --nocolor --nogroup --column --ignore-dir=.venv --ignore-dir=bin --ignore-file=is:.tags"

" Toggle line numbers and fold column for easy copying:
nnoremap <F2> :set nonumber!<CR>:set foldcolumn=0<CR>
"Vim will switch to paste mode, disabling all kinds of smartness and just pasting a whole buffer of text
set pastetoggle=<F2>


" <leader>v selects the just pasted text
nnoremap <leader>v V`]

" NERDTree on <leader>t and <leader>f
nnoremap <F10> :NERDTreeToggle<CR>
let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$', '\.dSYM$']

" Quit window on <leader>q
nnoremap <leader>q :q<CR>

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

" CTRLP support
let g:ctrlp_map = '<Leader>f'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_window = 'bottom,order:top,min:1,max:20'
nnoremap <leader><tab> :CtrlPMRU<CR>
nnoremap <leader>t :CtrlPTag<CR>

" toggle between number and relative number on ,l
nnoremap <leader>l :call ToggleRelativeAbsoluteNumber()<CR>
function! ToggleRelativeAbsoluteNumber()
  if &number
    set relativenumber
  else
    set number
  endif
endfunction

" gundo
nnoremap <Leader>u :GundoToggle<CR>

" Syntax sync
nnoremap <Leader>i :syntax sync fromstart<CR>


"map <F8> :!ctags -f tags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

map <F9> :SyntasticToggleMode <CR>
"

" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%120v.\+/
set cc=120


" sudo write this
cmap W! w !sudo tee % >/dev/null

" Better Search
set hlsearch
set incsearch

" Make syntastic auto update the location list and make it also check
" when the file opens
let g:syntastic_always_populate_loc_list=1
let g:syntastic_check_on_open=1


map <F8> :!ctags -f .tags --python-kinds=-i --exclude=.venv --exclude=.git -R .<CR>

" python support
" --------------
"  don't highlight exceptions and builtins. I love to override them in local
"  scopes and it sucks ass if it's highlighted then. And for exceptions I
"  don't really want to have different colors for my own exceptions ;-)
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=8
\ formatoptions=croq softtabstop=4 textwidth=74 comments=:#\:,:#
let python_highlight_all=1
"let python_highlight_exceptions=0
"let python_highlight_builtins=0
let python_slow_sync=1

let g:syntastic_python_checkers=['flake8', 'python']

" Don't warn on
"   E121 continuation line indentation is not a multiple of four
"   E128 continuation line under-indented for visual indent
"   E711 comparison to None should be 'if cond is not None:'
"   E301 expected 1 blank line, found 0
"   E261 at least two spaces before inline comment
"   E241 multiple spaces after ':'
"   E124 closing bracket does not match visual indentation
"   E126 continuation line over-indented for hanging indent
let g:syntastic_python_flake8_args='--ignore=E121,E128,E711,E301,E261,E241,E124,E126
    \ --max-line-length=100'


"
" vim-project configuration
"
let g:project_use_nerdtree = 1
set rtp+=~/.vim/bundle/vim-project/
call project#rc("~/cdn")

Project  'cdn-tracker-commons'
Project  'cdn-tracker-server'
Project  'cdn-tracker-worker'
Project  'cdn-global-tracker'
Project  'cdn-manager'
Project  'cdn-qa-framework'
Project  'cdn-topology'
Project  'cdn-topology-loader'
Project  'cdn-origin-conf'
Project  'cdn-tld-crons'
Project  'cdn-region-acquirer'
